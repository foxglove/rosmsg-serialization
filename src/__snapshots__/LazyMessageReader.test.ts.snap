// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`LazyReader should deserialize CustomType custom
    ============
    MSG: custom_type/CustomType
    uint8 first: CustomType custom
    ============
    MSG: custom_type/CustomType
    uint8 first 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class custom_type_CustomType {
    static first_size(view /* dataview */, offset) {
      return 1;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // uint8 first
      totalSize += 1;
      offset += 1;

      return totalSize;
    }

    first_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of custom_type_CustomType from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new custom_type_CustomType(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"custom_type/CustomType\\"))(reader);
    }

    get first() {
      const offset = this.first_offset(this._view, this._offset);
      return deserializers.uint8(this._view, offset);
    }
  }

  class __RootMsg {
    static custom_size(view /* dataview */, offset) {
      return custom_type_CustomType.size(view, offset);
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // custom_type/CustomType custom
      {
        const size = __RootMsg.custom_size(view, offset);
        totalSize += size;
        offset += size;
      }

      return totalSize;
    }

    custom_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    get custom() {
      const offset = this.custom_offset(this._view, this._offset);
      return custom_type_CustomType.build(this._view, offset);
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize CustomType[] custom
    ============
    MSG: custom_type/CustomType
    MoreCustom another
    ============
    MSG: custom_type/MoreCustom
    uint8 field: CustomType[] custom
    ============
    MSG: custom_type/CustomType
    MoreCustom another
    ============
    MSG: custom_type/MoreCustom
    uint8 field 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class custom_type_MoreCustom {
    static field_size(view /* dataview */, offset) {
      return 1;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // uint8 field
      totalSize += 1;
      offset += 1;

      return totalSize;
    }

    field_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of custom_type_MoreCustom from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new custom_type_MoreCustom(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"custom_type/MoreCustom\\"))(reader);
    }

    get field() {
      const offset = this.field_offset(this._view, this._offset);
      return deserializers.uint8(this._view, offset);
    }
  }

  class custom_type_CustomType {
    static another_size(view /* dataview */, offset) {
      return custom_type_MoreCustom.size(view, offset);
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // custom_type/MoreCustom another
      {
        const size = custom_type_CustomType.another_size(view, offset);
        totalSize += size;
        offset += size;
      }

      return totalSize;
    }

    another_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of custom_type_CustomType from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new custom_type_CustomType(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"custom_type/CustomType\\"))(reader);
    }

    get another() {
      const offset = this.another_offset(this._view, this._offset);
      return custom_type_MoreCustom.build(this._view, offset);
    }
  }

  class __RootMsg {
    static custom_size(view /* dataview */, offset) {
      return builtinSizes.array(view, offset, custom_type_CustomType.size);
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // custom_type/CustomType custom
      {
        const size = __RootMsg.custom_size(view, offset);
        totalSize += size;
        offset += size;
      }

      return totalSize;
    }

    custom_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    // custom_type/CustomType[] custom
    get custom() {
      const offset = this.custom_offset(this._view, this._offset);
      return deserializers.dynamicArray(
        this._view,
        offset,
        custom_type_CustomType.build,
        custom_type_CustomType.size
      );
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize CustomType[] custom
    ============
    MSG: custom_type/CustomType
    uint8 first: CustomType[] custom
    ============
    MSG: custom_type/CustomType
    uint8 first 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class custom_type_CustomType {
    static first_size(view /* dataview */, offset) {
      return 1;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // uint8 first
      totalSize += 1;
      offset += 1;

      return totalSize;
    }

    first_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of custom_type_CustomType from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new custom_type_CustomType(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"custom_type/CustomType\\"))(reader);
    }

    get first() {
      const offset = this.first_offset(this._view, this._offset);
      return deserializers.uint8(this._view, offset);
    }
  }

  class __RootMsg {
    static custom_size(view /* dataview */, offset) {
      return builtinSizes.array(view, offset, custom_type_CustomType.size);
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // custom_type/CustomType custom
      {
        const size = __RootMsg.custom_size(view, offset);
        totalSize += size;
        offset += size;
      }

      return totalSize;
    }

    custom_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    // custom_type/CustomType[] custom
    get custom() {
      const offset = this.custom_offset(this._view, this._offset);
      return deserializers.dynamicArray(
        this._view,
        offset,
        custom_type_CustomType.build,
        custom_type_CustomType.size
      );
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize CustomType[3] custom
    ============
    MSG: custom_type/CustomType
    uint8 first: CustomType[3] custom
    ============
    MSG: custom_type/CustomType
    uint8 first 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class custom_type_CustomType {
    static first_size(view /* dataview */, offset) {
      return 1;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // uint8 first
      totalSize += 1;
      offset += 1;

      return totalSize;
    }

    first_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of custom_type_CustomType from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new custom_type_CustomType(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"custom_type/CustomType\\"))(reader);
    }

    get first() {
      const offset = this.first_offset(this._view, this._offset);
      return deserializers.uint8(this._view, offset);
    }
  }

  class __RootMsg {
    static custom_size(view /* dataview */, offset) {
      return builtinSizes.fixedArray(
        view,
        offset,
        3,
        custom_type_CustomType.size
      );
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // custom_type/CustomType custom
      {
        const size = __RootMsg.custom_size(view, offset);
        totalSize += size;
        offset += size;
      }

      return totalSize;
    }

    custom_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    // custom_type/CustomType[3] custom
    get custom() {
      const offset = this.custom_offset(this._view, this._offset);
      return deserializers.fixedArray(
        this._view,
        offset,
        3,
        custom_type_CustomType.build,
        custom_type_CustomType.size
      );
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize duration stamp: duration stamp 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static stamp_size(view /* dataview */, offset) {
      return 8;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // duration stamp
      totalSize += 8;
      offset += 8;

      return totalSize;
    }

    stamp_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    get stamp() {
      const offset = this.stamp_offset(this._view, this._offset);
      return deserializers.duration(this._view, offset);
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize duration[] arr: duration[] arr 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static arr_size(view /* dataview */, offset) {
      const len = view.getUint32(offset, true);
      return 4 + len * 8;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // duration arr
      {
        const size = __RootMsg.arr_size(view, offset);
        totalSize += size;
        offset += size;
      }

      return totalSize;
    }

    arr_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    // duration[] arr
    get arr() {
      const offset = this.arr_offset(this._view, this._offset);
      const len = this._view.getUint32(offset, true);
      return deserializers.durationArray(this._view, offset + 4, len);
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize duration[1] arr: duration[1] arr 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static arr_size(view /* dataview */, offset) {
      return 8 * 1;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // duration[1] arr
      totalSize += 8;
      offset += 8;

      return totalSize;
    }

    arr_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    // duration[1] arr
    get arr() {
      const offset = this.arr_offset(this._view, this._offset);
      return deserializers.durationArray(this._view, offset, 1);
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize float32 sample: float32 sample 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static sample_size(view /* dataview */, offset) {
      return 4;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // float32 sample
      totalSize += 4;
      offset += 4;

      return totalSize;
    }

    sample_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    get sample() {
      const offset = this.sample_offset(this._view, this._offset);
      return deserializers.float32(this._view, offset);
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize float32[] arr: float32[] arr 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static arr_size(view /* dataview */, offset) {
      const len = view.getUint32(offset, true);
      return 4 + len * 4;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // float32 arr
      {
        const size = __RootMsg.arr_size(view, offset);
        totalSize += size;
        offset += size;
      }

      return totalSize;
    }

    arr_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    // float32[] arr
    get arr() {
      const offset = this.arr_offset(this._view, this._offset);
      const len = this._view.getUint32(offset, true);
      return deserializers.float32Array(this._view, offset + 4, len);
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize float32[] first
float32[] second: float32[] first
float32[] second 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static first_size(view /* dataview */, offset) {
      const len = view.getUint32(offset, true);
      return 4 + len * 4;
    }

    static second_size(view /* dataview */, offset) {
      const len = view.getUint32(offset, true);
      return 4 + len * 4;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // float32 first
      {
        const size = __RootMsg.first_size(view, offset);
        totalSize += size;
        offset += size;
      }

      // float32 second
      {
        const size = __RootMsg.second_size(view, offset);
        totalSize += size;
        offset += size;
      }

      return totalSize;
    }

    first_offset(view, initOffset) {
      return initOffset;
    }

    second_offset(view, initOffset) {
      if (this._second_offset_cache) {
        return this._second_offset_cache;
      }
      const prevOffset = this.first_offset(view, initOffset);
      const totalOffset = prevOffset + __RootMsg.first_size(view, prevOffset);
      this._second_offset_cache = totalOffset;
      return totalOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
      this._second_offset_cache = undefined;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    // float32[] first
    get first() {
      const offset = this.first_offset(this._view, this._offset);
      const len = this._view.getUint32(offset, true);
      return deserializers.float32Array(this._view, offset + 4, len);
    }

    // float32[] second
    get second() {
      const offset = this.second_offset(this._view, this._offset);
      const len = this._view.getUint32(offset, true);
      return deserializers.float32Array(this._view, offset + 4, len);
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize float32[2] arr: float32[2] arr 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static arr_size(view /* dataview */, offset) {
      return 4 * 2;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // float32[2] arr
      totalSize += 8;
      offset += 8;

      return totalSize;
    }

    arr_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    // float32[2] arr
    get arr() {
      const offset = this.arr_offset(this._view, this._offset);
      return deserializers.float32Array(this._view, offset, 2);
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize float64 sample: float64 sample 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static sample_size(view /* dataview */, offset) {
      return 8;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // float64 sample
      totalSize += 8;
      offset += 8;

      return totalSize;
    }

    sample_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    get sample() {
      const offset = this.sample_offset(this._view, this._offset);
      return deserializers.float64(this._view, offset);
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize int8 STATUS_ONE = 1
       int8 STATUS_TWO = 2
       int8 status: int8 STATUS_ONE = 1
       int8 STATUS_TWO = 2
       int8 status 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static status_size(view /* dataview */, offset) {
      return 1;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // int8 status
      totalSize += 1;
      offset += 1;

      return totalSize;
    }

    status_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    get status() {
      const offset = this.status_offset(this._view, this._offset);
      return deserializers.int8(this._view, offset);
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize int8 first
int8 second: int8 first
int8 second 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static first_size(view /* dataview */, offset) {
      return 1;
    }

    static second_size(view /* dataview */, offset) {
      return 1;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // int8 first
      totalSize += 1;
      offset += 1;

      // int8 second
      totalSize += 1;
      offset += 1;

      return totalSize;
    }

    first_offset(view, initOffset) {
      return initOffset;
    }

    second_offset(view, initOffset) {
      if (this._second_offset_cache) {
        return this._second_offset_cache;
      }
      const prevOffset = this.first_offset(view, initOffset);
      const totalOffset = prevOffset + __RootMsg.first_size(view, prevOffset);
      this._second_offset_cache = totalOffset;
      return totalOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
      this._second_offset_cache = undefined;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    get first() {
      const offset = this.first_offset(this._view, this._offset);
      return deserializers.int8(this._view, offset);
    }
    get second() {
      const offset = this.second_offset(this._view, this._offset);
      return deserializers.int8(this._view, offset);
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize int8 sample # highest: int8 sample # highest 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static sample_size(view /* dataview */, offset) {
      return 1;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // int8 sample
      totalSize += 1;
      offset += 1;

      return totalSize;
    }

    sample_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    get sample() {
      const offset = this.sample_offset(this._view, this._offset);
      return deserializers.int8(this._view, offset);
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize int8 sample # lowest: int8 sample # lowest 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static sample_size(view /* dataview */, offset) {
      return 1;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // int8 sample
      totalSize += 1;
      offset += 1;

      return totalSize;
    }

    sample_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    get sample() {
      const offset = this.sample_offset(this._view, this._offset);
      return deserializers.int8(this._view, offset);
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize int8[] first: int8[] first 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static first_size(view /* dataview */, offset) {
      const len = view.getUint32(offset, true);
      return 4 + len * 1;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // int8 first
      {
        const size = __RootMsg.first_size(view, offset);
        totalSize += size;
        offset += size;
      }

      return totalSize;
    }

    first_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    // int8[] first
    get first() {
      const offset = this.first_offset(this._view, this._offset);
      const len = this._view.getUint32(offset, true);
      return deserializers.int8Array(this._view, offset + 4, len);
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize int8[4] first: int8[4] first 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static first_size(view /* dataview */, offset) {
      return 1 * 4;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // int8[4] first
      totalSize += 4;
      offset += 4;

      return totalSize;
    }

    first_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    // int8[4] first
    get first() {
      const offset = this.first_offset(this._view, this._offset);
      return deserializers.int8Array(this._view, offset, 4);
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize int16 sample # highest: int16 sample # highest 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static sample_size(view /* dataview */, offset) {
      return 2;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // int16 sample
      totalSize += 2;
      offset += 2;

      return totalSize;
    }

    sample_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    get sample() {
      const offset = this.sample_offset(this._view, this._offset);
      return deserializers.int16(this._view, offset);
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize int16 sample # lowest: int16 sample # lowest 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static sample_size(view /* dataview */, offset) {
      return 2;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // int16 sample
      totalSize += 2;
      offset += 2;

      return totalSize;
    }

    sample_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    get sample() {
      const offset = this.sample_offset(this._view, this._offset);
      return deserializers.int16(this._view, offset);
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize int32 sample # highest: int32 sample # highest 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static sample_size(view /* dataview */, offset) {
      return 4;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // int32 sample
      totalSize += 4;
      offset += 4;

      return totalSize;
    }

    sample_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    get sample() {
      const offset = this.sample_offset(this._view, this._offset);
      return deserializers.int32(this._view, offset);
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize int32 sample # lowest: int32 sample # lowest 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static sample_size(view /* dataview */, offset) {
      return 4;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // int32 sample
      totalSize += 4;
      offset += 4;

      return totalSize;
    }

    sample_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    get sample() {
      const offset = this.sample_offset(this._view, this._offset);
      return deserializers.int32(this._view, offset);
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize int32[] arr: int32[] arr 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static arr_size(view /* dataview */, offset) {
      const len = view.getUint32(offset, true);
      return 4 + len * 4;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // int32 arr
      {
        const size = __RootMsg.arr_size(view, offset);
        totalSize += size;
        offset += size;
      }

      return totalSize;
    }

    arr_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    // int32[] arr
    get arr() {
      const offset = this.arr_offset(this._view, this._offset);
      const len = this._view.getUint32(offset, true);
      return deserializers.int32Array(this._view, offset + 4, len);
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize int64 sample # highest: int64 sample # highest 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static sample_size(view /* dataview */, offset) {
      return 8;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // int64 sample
      totalSize += 8;
      offset += 8;

      return totalSize;
    }

    sample_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    get sample() {
      const offset = this.sample_offset(this._view, this._offset);
      return deserializers.int64(this._view, offset);
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize int64 sample # lowest: int64 sample # lowest 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static sample_size(view /* dataview */, offset) {
      return 8;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // int64 sample
      totalSize += 8;
      offset += 8;

      return totalSize;
    }

    sample_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    get sample() {
      const offset = this.sample_offset(this._view, this._offset);
      return deserializers.int64(this._view, offset);
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize string first
int8 second: string first
int8 second 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static first_size(view /* dataview */, offset) {
      return builtinSizes.string(view, offset);
    }

    static second_size(view /* dataview */, offset) {
      return 1;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // string first
      {
        const size = __RootMsg.first_size(view, offset);
        totalSize += size;
        offset += size;
      }

      // int8 second
      totalSize += 1;
      offset += 1;

      return totalSize;
    }

    first_offset(view, initOffset) {
      return initOffset;
    }

    second_offset(view, initOffset) {
      if (this._second_offset_cache) {
        return this._second_offset_cache;
      }
      const prevOffset = this.first_offset(view, initOffset);
      const totalOffset = prevOffset + __RootMsg.first_size(view, prevOffset);
      this._second_offset_cache = totalOffset;
      return totalOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
      this._second_offset_cache = undefined;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    get first() {
      const offset = this.first_offset(this._view, this._offset);
      return deserializers.string(this._view, offset);
    }
    get second() {
      const offset = this.second_offset(this._view, this._offset);
      return deserializers.int8(this._view, offset);
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize string sample # empty string: string sample # empty string 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static sample_size(view /* dataview */, offset) {
      return builtinSizes.string(view, offset);
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // string sample
      {
        const size = __RootMsg.sample_size(view, offset);
        totalSize += size;
        offset += size;
      }

      return totalSize;
    }

    sample_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    get sample() {
      const offset = this.sample_offset(this._view, this._offset);
      return deserializers.string(this._view, offset);
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize string sample # some string: string sample # some string 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static sample_size(view /* dataview */, offset) {
      return builtinSizes.string(view, offset);
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // string sample
      {
        const size = __RootMsg.sample_size(view, offset);
        totalSize += size;
        offset += size;
      }

      return totalSize;
    }

    sample_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    get sample() {
      const offset = this.sample_offset(this._view, this._offset);
      return deserializers.string(this._view, offset);
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize string[] first: string[] first 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static first_size(view /* dataview */, offset) {
      return builtinSizes.array(view, offset, builtinSizes.string);
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // string first
      {
        const size = __RootMsg.first_size(view, offset);
        totalSize += size;
        offset += size;
      }

      return totalSize;
    }

    first_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    // string[] first
    get first() {
      const offset = this.first_offset(this._view, this._offset);
      return deserializers.dynamicArray(
        this._view,
        offset,
        deserializers.string,
        builtinSizes.string
      );
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize string[2] first: string[2] first 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static first_size(view /* dataview */, offset) {
      return builtinSizes.fixedArray(view, offset, 2, builtinSizes.string);
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // string first
      {
        const size = __RootMsg.first_size(view, offset);
        totalSize += size;
        offset += size;
      }

      return totalSize;
    }

    first_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    // string[2] first
    get first() {
      const offset = this.first_offset(this._view, this._offset);
      return deserializers.fixedArray(
        this._view,
        offset,
        2,
        deserializers.string,
        builtinSizes.string
      );
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize time stamp: time stamp 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static stamp_size(view /* dataview */, offset) {
      return 8;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // time stamp
      totalSize += 8;
      offset += 8;

      return totalSize;
    }

    stamp_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    get stamp() {
      const offset = this.stamp_offset(this._view, this._offset);
      return deserializers.time(this._view, offset);
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize time[] arr: time[] arr 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static arr_size(view /* dataview */, offset) {
      const len = view.getUint32(offset, true);
      return 4 + len * 8;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // time arr
      {
        const size = __RootMsg.arr_size(view, offset);
        totalSize += size;
        offset += size;
      }

      return totalSize;
    }

    arr_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    // time[] arr
    get arr() {
      const offset = this.arr_offset(this._view, this._offset);
      const len = this._view.getUint32(offset, true);
      return deserializers.timeArray(this._view, offset + 4, len);
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize time[1] arr: time[1] arr 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static arr_size(view /* dataview */, offset) {
      return 8 * 1;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // time[1] arr
      totalSize += 8;
      offset += 8;

      return totalSize;
    }

    arr_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    // time[1] arr
    get arr() {
      const offset = this.arr_offset(this._view, this._offset);
      return deserializers.timeArray(this._view, offset, 1);
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize uint8 blank
float32[] arr: uint8 blank
float32[] arr 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static blank_size(view /* dataview */, offset) {
      return 1;
    }

    static arr_size(view /* dataview */, offset) {
      const len = view.getUint32(offset, true);
      return 4 + len * 4;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // uint8 blank
      totalSize += 1;
      offset += 1;

      // float32 arr
      {
        const size = __RootMsg.arr_size(view, offset);
        totalSize += size;
        offset += size;
      }

      return totalSize;
    }

    blank_offset(view, initOffset) {
      return initOffset;
    }

    arr_offset(view, initOffset) {
      if (this._arr_offset_cache) {
        return this._arr_offset_cache;
      }
      const prevOffset = this.blank_offset(view, initOffset);
      const totalOffset = prevOffset + __RootMsg.blank_size(view, prevOffset);
      this._arr_offset_cache = totalOffset;
      return totalOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
      this._arr_offset_cache = undefined;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    get blank() {
      const offset = this.blank_offset(this._view, this._offset);
      return deserializers.uint8(this._view, offset);
    }

    // float32[] arr
    get arr() {
      const offset = this.arr_offset(this._view, this._offset);
      const len = this._view.getUint32(offset, true);
      return deserializers.float32Array(this._view, offset + 4, len);
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize uint8 blank
float32[2] arr: uint8 blank
float32[2] arr 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static blank_size(view /* dataview */, offset) {
      return 1;
    }

    static arr_size(view /* dataview */, offset) {
      return 4 * 2;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // uint8 blank
      totalSize += 1;
      offset += 1;

      // float32[2] arr
      totalSize += 8;
      offset += 8;

      return totalSize;
    }

    blank_offset(view, initOffset) {
      return initOffset;
    }

    arr_offset(view, initOffset) {
      if (this._arr_offset_cache) {
        return this._arr_offset_cache;
      }
      const prevOffset = this.blank_offset(view, initOffset);
      const totalOffset = prevOffset + __RootMsg.blank_size(view, prevOffset);
      this._arr_offset_cache = totalOffset;
      return totalOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
      this._arr_offset_cache = undefined;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    get blank() {
      const offset = this.blank_offset(this._view, this._offset);
      return deserializers.uint8(this._view, offset);
    }

    // float32[2] arr
    get arr() {
      const offset = this.arr_offset(this._view, this._offset);
      return deserializers.float32Array(this._view, offset, 2);
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize uint8 blank
int32[] arr: uint8 blank
int32[] arr 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static blank_size(view /* dataview */, offset) {
      return 1;
    }

    static arr_size(view /* dataview */, offset) {
      const len = view.getUint32(offset, true);
      return 4 + len * 4;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // uint8 blank
      totalSize += 1;
      offset += 1;

      // int32 arr
      {
        const size = __RootMsg.arr_size(view, offset);
        totalSize += size;
        offset += size;
      }

      return totalSize;
    }

    blank_offset(view, initOffset) {
      return initOffset;
    }

    arr_offset(view, initOffset) {
      if (this._arr_offset_cache) {
        return this._arr_offset_cache;
      }
      const prevOffset = this.blank_offset(view, initOffset);
      const totalOffset = prevOffset + __RootMsg.blank_size(view, prevOffset);
      this._arr_offset_cache = totalOffset;
      return totalOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
      this._arr_offset_cache = undefined;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    get blank() {
      const offset = this.blank_offset(this._view, this._offset);
      return deserializers.uint8(this._view, offset);
    }

    // int32[] arr
    get arr() {
      const offset = this.arr_offset(this._view, this._offset);
      const len = this._view.getUint32(offset, true);
      return deserializers.int32Array(this._view, offset + 4, len);
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize uint8 blank
time[] arr: uint8 blank
time[] arr 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static blank_size(view /* dataview */, offset) {
      return 1;
    }

    static arr_size(view /* dataview */, offset) {
      const len = view.getUint32(offset, true);
      return 4 + len * 8;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // uint8 blank
      totalSize += 1;
      offset += 1;

      // time arr
      {
        const size = __RootMsg.arr_size(view, offset);
        totalSize += size;
        offset += size;
      }

      return totalSize;
    }

    blank_offset(view, initOffset) {
      return initOffset;
    }

    arr_offset(view, initOffset) {
      if (this._arr_offset_cache) {
        return this._arr_offset_cache;
      }
      const prevOffset = this.blank_offset(view, initOffset);
      const totalOffset = prevOffset + __RootMsg.blank_size(view, prevOffset);
      this._arr_offset_cache = totalOffset;
      return totalOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
      this._arr_offset_cache = undefined;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    get blank() {
      const offset = this.blank_offset(this._view, this._offset);
      return deserializers.uint8(this._view, offset);
    }

    // time[] arr
    get arr() {
      const offset = this.arr_offset(this._view, this._offset);
      const len = this._view.getUint32(offset, true);
      return deserializers.timeArray(this._view, offset + 4, len);
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize uint8 sample # highest: uint8 sample # highest 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static sample_size(view /* dataview */, offset) {
      return 1;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // uint8 sample
      totalSize += 1;
      offset += 1;

      return totalSize;
    }

    sample_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    get sample() {
      const offset = this.sample_offset(this._view, this._offset);
      return deserializers.uint8(this._view, offset);
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize uint8 sample # lowest: uint8 sample # lowest 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static sample_size(view /* dataview */, offset) {
      return 1;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // uint8 sample
      totalSize += 1;
      offset += 1;

      return totalSize;
    }

    sample_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    get sample() {
      const offset = this.sample_offset(this._view, this._offset);
      return deserializers.uint8(this._view, offset);
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize uint8[4] first: uint8[4] first 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static first_size(view /* dataview */, offset) {
      return 1 * 4;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // uint8[4] first
      totalSize += 4;
      offset += 4;

      return totalSize;
    }

    first_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    // uint8[4] first
    get first() {
      const offset = this.first_offset(this._view, this._offset);
      return deserializers.uint8Array(this._view, offset, 4);
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize uint16 sample # highest: uint16 sample # highest 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static sample_size(view /* dataview */, offset) {
      return 2;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // uint16 sample
      totalSize += 2;
      offset += 2;

      return totalSize;
    }

    sample_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    get sample() {
      const offset = this.sample_offset(this._view, this._offset);
      return deserializers.uint16(this._view, offset);
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize uint16 sample # lowest: uint16 sample # lowest 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static sample_size(view /* dataview */, offset) {
      return 2;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // uint16 sample
      totalSize += 2;
      offset += 2;

      return totalSize;
    }

    sample_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    get sample() {
      const offset = this.sample_offset(this._view, this._offset);
      return deserializers.uint16(this._view, offset);
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize uint32 sample # highest: uint32 sample # highest 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static sample_size(view /* dataview */, offset) {
      return 4;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // uint32 sample
      totalSize += 4;
      offset += 4;

      return totalSize;
    }

    sample_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    get sample() {
      const offset = this.sample_offset(this._view, this._offset);
      return deserializers.uint32(this._view, offset);
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize uint32 sample # lowest: uint32 sample # lowest 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static sample_size(view /* dataview */, offset) {
      return 4;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // uint32 sample
      totalSize += 4;
      offset += 4;

      return totalSize;
    }

    sample_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    get sample() {
      const offset = this.sample_offset(this._view, this._offset);
      return deserializers.uint32(this._view, offset);
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize uint64 sample # highest: uint64 sample # highest 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static sample_size(view /* dataview */, offset) {
      return 8;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // uint64 sample
      totalSize += 8;
      offset += 8;

      return totalSize;
    }

    sample_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    get sample() {
      const offset = this.sample_offset(this._view, this._offset);
      return deserializers.uint64(this._view, offset);
    }
  }
  return __RootMsg;
}
"
`;

exports[`LazyReader should deserialize uint64 sample # lowest: uint64 sample # lowest 1`] = `
"function anonymous(
  deserializers,
  builtinSizes,
  typeReaders,
  StandardTypeReader
) {
  class __RootMsg {
    static sample_size(view /* dataview */, offset) {
      return 8;
    }

    // return the total serialized size of the message in the view
    static size(view /* DataView */, initOffset = 0) {
      let totalSize = 0;
      let offset = initOffset;

      // uint64 sample
      totalSize += 8;
      offset += 8;

      return totalSize;
    }

    sample_offset(view, initOffset) {
      return initOffset;
    }

    // return an instance of __RootMsg from the view at initOffset bytes into the view
    // NOTE: the underlying view data lifetime must be at least the lifetime of the instance
    static build(view /* DataView */, offset = 0) {
      return new __RootMsg(view, offset);
    }

    constructor(view, offset = 0) {
      this._view = view;
      this._offset = offset;
    }

    // return a json object of the fields
    // This fully deserializes all fields of the message into native types
    // Typed arrays are considered native types and remain as typed arrays
    toJSON() {
      const view = this._view;
      const buffer = new Uint8Array(
        view.buffer,
        view.byteOffset + this._offset,
        view.byteLength - this._offset
      );
      const reader = new StandardTypeReader(buffer);
      return new (typeReaders.get(\\"__RootMsg\\"))(reader);
    }

    get sample() {
      const offset = this.sample_offset(this._view, this._offset);
      return deserializers.uint64(this._view, offset);
    }
  }
  return __RootMsg;
}
"
`;
